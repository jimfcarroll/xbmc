<%
matcher = ltype =~ /Tuple(3){0,1}<\((.*)\)>/
    tuplesize = matcher[0][1]
    vectype = '(' + matcher[0][2] + ')'
    boolean ispointer = swigTypeParser.SwigType_ispointer(type)
    String accessor = ispointer ? '->' : '.'
    int seq = sequence.increment()
    tupleAccess = [ 'first', 'second', 'third' ]
%>
    {
      bool isTuple = PyObject_TypeCheck(${slarg},&PyTuple_Type);
      if (!isTuple && !PyObject_TypeCheck(${slarg},&PyList_Type))
      {
        PyErr_SetString(PyExc_TypeError, "the parameter \"${api}\" must be either a Tuple or a List.");
        return NULL; // short circuit the rest of this python method
      }
      int vecSize = (isTuple ? PyTuple_Size(${slarg}) : PyList_Size(${slarg}));
<%
      swigTypeParser.SwigType_parmlist(vectype).eachWithIndex { curType, entryIndex -> 
%>
      if (vecSize > ${entryIndex})
      {
        PyObject *pyentry${entryIndex}_${seq} = NULL;
        pyentry${entryIndex}_${seq} = (isTuple ? PyTuple_GetItem(${slarg}, ${entryIndex}) : PyList_GetItem(${slarg}, ${entryIndex}));
        ${swigTypeParser.SwigType_str(swigTypeParser.SwigType_ltype(curType))} entry${entryIndex}_${seq};
        ${helper.getInConversion(curType, 'entry' + entryIndex + '_' + seq, 'pyentry' + entryIndex + '_' + seq, method,
                                 [ 'type' : vectype,
                                   'ltype' : swigTypeParser.SwigType_ltype(curType),
                                   'sequence' : sequence
                                   ])}
        ${api}${accessor}${tupleAccess[entryIndex]}() = entry${entryIndex}_${seq};
      }
<%
      }
%>
      ${api}${accessor}SetNumValuesSet(vecSize);
    }
